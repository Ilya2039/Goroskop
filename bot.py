import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import sqlite3
import json  # –í–ê–ñ–ù–û: –¥–ª—è json.loads
from google import genai

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7584759675:AAGMKdKTRMjaC0Rc1g-Ysw-5J2dlniIQdAA'
MINI_APP_URL = 'https://a67f-79-127-211-218.ngrok-free.app'  # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
GEMINI_API_KEY = "AIzaSyCqE4taBEs1GJUh_pJQUqdGgcSEfGL8Pbc"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á Gemini

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Gemini API
bot = telebot.TeleBot(API_TOKEN)
gemini_client = genai.Client(api_key=GEMINI_API_KEY)

# üîπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
DB_NAME = "users.db"

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def add_user(user_id, username, first_name, last_name):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    try:
        cursor.execute("""
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        """, (user_id, username, first_name, last_name))
        conn.commit()
    except sqlite3.IntegrityError:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
        pass
    
    conn.close()

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_db()

# üîπ –ö–∞—Ä—Ç—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
tarot_meanings = {
    1: "–û–≥–æ–Ω—å",
    2: "–í–æ–¥–∞",
    3: "–ó–µ–º–ª—è",
    4: "–í–æ–∑–¥—É—Ö",
    5: "–°–∏–ª–∞",
    6: "–ú—É–¥—Ä–æ—Å—Ç—å",
    7: "–õ—é–±–æ–≤—å",
    8: "–î–æ–º"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cards = {}

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    add_user(user_id, username, first_name, last_name)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîÆ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ", web_app=WebAppInfo(url=MINI_APP_URL)))

    bot.send_message(
        chat_id=message.chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ:",
        reply_markup=keyboard
    )

@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    print(">>> web_app_data handler TRIGGERED!")
    user_id = message.chat.id

    try:
        # –î–∞–Ω–Ω—ã–µ, –ø—Ä–∏—à–µ–¥—à–∏–µ –∏–∑ tg.sendData(...) (JSON-—Å—Ç—Ä–æ–∫–∞)
        selected_cards_json = message.web_app_data.data
        selected_cards = json.loads(selected_cards_json)  # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º JSON –≤ —Å–ø–∏—Å–æ–∫

        # –ù–∞–ø—Ä–∏–º–µ—Ä selected_cards = ["–¢–∞—Ä–æ1.jpg", "–¢–∞—Ä–æ5.jpg", "–¢–∞—Ä–æ3.jpg"]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç (1..8)
        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É: "–¢–∞—Ä–æ{–Ω–æ–º–µ—Ä}.jpg"
        numbers = []
        for filename in selected_cards:
            # –ò–∑ "–¢–∞—Ä–æ1.jpg" –¥–æ—Å—Ç–∞—ë–º 1
            # –ú–æ–∂–Ω–æ —Ä–µ–≥—É–ª—è—Ä–∫–æ–π, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ—â–µ:
            # –≤—ã—Ä–µ–∑–∞—Ç—å "–¢–∞—Ä–æ" –∏ ".jpg": "1"
            num_str = filename.replace("–¢–∞—Ä–æ", "").replace(".jpg", "")
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int
            try:
                num = int(num_str)
                numbers.append(num)
            except:
                pass

        if len(numbers) != 3:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç –ø–æ –Ω–æ–º–µ—Ä–∞–º
        selected_meanings = []
        for num in numbers:
            meaning = tarot_meanings.get(num)
            if meaning:
                selected_meanings.append(meaning)

        if len(selected_meanings) != 3:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini
        query = (
            f"–ö–∞—Ä—Ç—ã —Ç–∞—Ä–æ –ø–æ–∫–∞–∑–∞–ª–∏ —á–µ–ª–æ–≤–µ–∫—É {', '.join(selected_meanings)}. "
            f"–ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å? –î–∞–π –æ—Ç–≤–µ—Ç –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        print("üîç –ó–∞–ø—Ä–æ—Å –≤ Gemini:", query)

        try:
            response = gemini_client.models.generate_content(
                model="gemini-2.0-flash-exp",
                contents=query
            )

            if hasattr(response, "text") and response.text:
                answer = response.text.strip()
            else:
                answer = "‚ùå Gemini –Ω–µ –¥–∞–ª –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."

            print("üîÆ –û—Ç–≤–µ—Ç –æ—Ç Gemini:", answer)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(
                chat_id=user_id,
                text=f"üìú –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {', '.join(selected_meanings)}\n\n‚ú® –û—Ç–≤–µ—Ç –æ—Ç Gemini:\n{answer}"
            )

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini:", e)
            bot.send_message(
                chat_id=user_id,
                text="üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data:", e)
        bot.send_message(user_id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")



# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)

