import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import sqlite3
import json  # –í–ê–ñ–ù–û: –¥–ª—è json.loads
import google.generativeai as genai  

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7584759675:AAGMKdKTRMjaC0Rc1g-Ysw-5J2dlniIQdAA'
MINI_APP_URL = 'https://eb12-79-127-211-218.ngrok-free.app'  # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
GEMINI_API_KEY = "AIzaSyCqE4taBEs1GJUh_pJQUqdGgcSEfGL8Pbc"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á Gemini


# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Gemini API
bot = telebot.TeleBot(API_TOKEN)
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-pro")

# üîπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
DB_NAME = "users.db"

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def add_user(user_id, username, first_name, last_name):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute("""
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        """, (user_id, username, first_name, last_name))
        conn.commit()
    except sqlite3.IntegrityError:
        pass  
    conn.close()

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_db()

# üîπ –ö–∞—Ä—Ç—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
tarot_meanings = {
    1: "–û–≥–æ–Ω—å",
    2: "–í–æ–¥–∞",
    3: "–ó–µ–º–ª—è",
    4: "–í–æ–∑–¥—É—Ö",
    5: "–°–∏–ª–∞",
    6: "–ú—É–¥—Ä–æ—Å—Ç—å",
    7: "–õ—é–±–æ–≤—å",
    8: "–î–æ–º"
}

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    add_user(user_id, username, first_name, last_name)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîÆ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ", web_app=WebAppInfo(url=MINI_APP_URL)))

    bot.send_message(
        chat_id=message.chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ:",
        reply_markup=keyboard
    )

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å–∫–ª–∞–¥—É"
@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    user_id = message.chat.id

    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp
        selected_cards_json = message.web_app_data.data
        selected_cards = json.loads(selected_cards_json)  

        numbers = []
        for filename in selected_cards:
            num_str = filename.replace("–¢–∞—Ä–æ", "").replace(".jpg", "")
            try:
                num = int(num_str)
                numbers.append(num)
            except:
                pass

        if len(numbers) != 3:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã.")
            return

        selected_meanings = [tarot_meanings.get(num) for num in numbers if tarot_meanings.get(num)]
        if len(selected_meanings) != 3:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç.")
            return

        # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
        for meaning in selected_meanings:
            query = f"–ß–µ–ª–æ–≤–µ–∫—É –≤—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞ {meaning}. –î–∞–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å? –û—Ç–≤–µ—Ç –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤."
            try:
                response = model.generate_content(query)
                if hasattr(response, "text") and response.text:
                    prediction = response.text.strip()
                else:
                    prediction = "‚ùå Gemini –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞."
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini:", e)
                prediction = "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini."

            bot.send_message(user_id, f"üîÆ –ö–∞—Ä—Ç–∞: {meaning}\n‚ú® {prediction}")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data:", e)
        bot.send_message(user_id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
